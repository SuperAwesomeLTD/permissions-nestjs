/*
Note: This file doesn't have normal tests!

It is only for documentation purposes, generating docs by including code files & running some e2e tests to prove our examples actually work.

See example/src/__tests__/normal.documents.controller.e2e-spec.ts
*/
import * as request from 'supertest';
import * as _ from 'lodash';
import { Test, TestingModule } from '@nestjs/testing';
import { HttpStatus, INestApplication } from '@nestjs/common';
import * as upath from 'upath';

import { ExampleSimpleModule } from '../simple/example-simple.module';
import {
  ALL_DOCUMENTS,
  isUserCreatorOfDocument,
} from '@superawesome/permissions/dist/__tests__/data.fixtures';
import {
  docs,
  code,
  joinAll,
  DO_NOT_EDIT_NOTICE,
  noJestRunner,
  fileToText,
} from '@superawesome/permissions/dist/__tests__/utils/test.utils';
import { pOTS } from '@superawesome/permissions/dist/__tests__/utils/pOTS';
import { documentPermissionDefinitions } from '../permissions/document.permissions';
import { IUser } from '@superawesome/permissions';

const findDocument = documentId => _.find(ALL_DOCUMENTS, { id: documentId });

noJestRunner();

let injectedUser = null;
jest.mock('../permissions/getUser', () => ({ getUser: () => injectedUser }));

describe(
  DO_NOT_EDIT_NOTICE(upath.relative(__dirname, __filename)) +
    '\n' +
    joinAll(
      docs(`
# NestJS with SuperAwesome Permissions - Simple Example

## Simple Documents Protected Controller Example

This is a trivial NestJS example, based on the same schema & PermissionDefinitions & data of the [SuperAwesome Permissions example](https://permissions.docs.superawesome.com/additional-documentation/detailed-usage-&-examples.html) (file \`@superawesome/permissions/dist/__tests__/data.fixtures\` which you shouldn't ever have to import).

__Notes:__

- These docs are generated by e2e-tests, the **examples are actual e2e tests**!

- All example code is in \`/example\`.

## Business Rules

Our business rules are exactly the same as permissions examples (they are imported from it):

${documentPermissionDefinitions.map(pd => pd.descr).join('\n\n')}

**Now, how super awesome would it be if only...**

> ...we could **fully protect our NestJS apps** with the full effect of the above rules, just using a couple of decorators and declarative lines of code?

With **SuperAwesome Permissions for NestJs** that's exactly what we can do!

## PermissionsDefinitions

The Business Rules give rise to PermissionsDefinitions, lets have them here reference.

__Note__:
  They have an important **PermissionsDefinitions** difference from the [SuperAwesome Permissions example](https://permissions.docs.superawesome.com/additional-documentation/detailed-usage-&-examples.html): the [ownership hooks are replaced with a string](/interfaces/IPermissionDefinitionStringOwnHooks.html) (cause [its impossible](https://stackoverflow.com/questions/55560858/in-nest-js-is-it-possible-to-get-service-instance-inside-a-param-decorator) to [inject on a guard/decorator](https://github.com/nestjs/nest/issues/1038) on nestjs.

  This small "glitch" will be solved in a future release (if you can help resolve this, please do!).

  But this "glitch" highlights the way SuperAwesome Permissions could work in different languages, using JSON as the Lingua Franca for PermissionDefinitions: the **string names correspond to method names of a Service**, which we'll see shortly.`),
      code(
        `const documentPermissionDefinitions = ${pOTS(
          documentPermissionDefinitions,
        )};`,
      ),
    ),
  () => {
    const endpoint = '/documents-protected-simple';

    const nakedFilename = 'document-unprotected.controller.ts';
    describe(
      joinAll(
        docs(`
## The Unprotected Example (__tests__/${nakedFilename})

Let's consider the simplest "naked" example, of an unprotected Controller for documents, without any permissions:`),
        fileToText(__dirname, `../${nakedFilename}`, '', {
          printWidth: 78,
          parser: 'typescript',
        }),
        docs(`
How quickly can we transform this code to be "protected"? Let see it before we delve into tests.`),
      ),
      () => {},
    );

    describe(
      joinAll(
        docs(`
## Simplest Protected Example

Time to reveal the most interesting part: the code that implements all of the above, has minimal impact: **5 tiny lines** of declarative code! It is **deceivingly simple**:`),
        fileToText(
          __dirname,
          '../simple/document-protected-simple.controller.ts',
          '@UseGuards',
          { printWidth: 78, parser: 'typescript' },
        ),
        docs(`

We see that with just 5 simple LoCs we touched (2, 8, 10, 14 & 15), we have in effect the full blown permissions of the above  definitions. And best of all, all business rules updates (i.e expressed as PermissionDefinition) will need **zero code changes**.

But there is no magic! There's just a lot going behind the scenes, with such little code, so lets dive in.

- **L2** creates our Guard, declaring only:

  - for which \`resource\` we query about & protect (i.e **document** in this case) as default, it can change per endpoint.

  - any relevant \`PermissionDefinitions\` we want to provide here. Note that we could add them in other places like the module & other controllers - they **all come in effect equally at runtime**.

- **L6** the **read** method name becomes the **name of the action** (by default, can be overridden).

- **L8** we inject the \`Permit\` instance in our method (its created by the Guard internally via \`.grantPermit()\`). It holds all the information we'll need for the authorization & permissions part of our app, including user, allowed attributes, ownership checks and pick / filter utils.

- **before reaching L10** permissions-nestjs already knows from L5 the a special \`id\` param on our endpoint (\`id\` as default, it can change - jump to [reference & detailed example](/additional-documentation/reference-&-detailed-example.html) to see how). The library  executes \`isOwn(id)\` behind the scenes, and if doc isnt owned by user (and user doesnt have \`permit.anyGranted\`) it returns \`403 Forbidden\` before even reaching the method.

- **L10** simply \`permit.pick\` only the allowed **read** attributes from a document, depending on the User and their ownership of the resource. We dont need to check if it \`isOwn\` cause of the guard doing it on \`id\` param for us!

- **L14** & **L15** for the **list** method we inject \`Permit\` so we can call \`permit.filterPick()\` on this simple implementation. Each each user can now list **all but only the resources & their attributes** that they are entitled to. There are ways of adapting & scaling such "many own items code" arbitrarily (eg if we were dealing with a DB) with little code - see [\`permit.limitOwn()\`](https://permissions.docs.superawesome.com/classes/Permit.html#limitOwn) and check \`document-protected-detailed.controller\` example below.
`),
      ),
      () => {},
    );

    describe(`
## The Specs

__Note:__ These are actual tests against the protected controllers!
    `, () => {
      let app: INestApplication;
      beforeEach(async () => {
        const moduleFixture: TestingModule = await Test.createTestingModule({
          imports: [ExampleSimpleModule],
        }).compile();

        app = moduleFixture.createNestApplication();
        await app.init();
      });

      afterEach(async () => await app.close());

      describe(
        docs(`

## Example calls

Lets now call our endpoints, with different users, and see what we'll get.
`),
        () => {
          const testCases: [
            IUser,
            string[],
          ][] /* [user, expectedOmittedFields */ = [
            [{ id: 1, roles: ['EMPLOYEE'] }, ['confidential']],
            [{ id: 2, roles: ['COMPANY_ADMIN'] }, []],
          ];

          describe.each(testCases)(
            docs(`
### Action "read"

First lets try "read" specific documents (OWN and NON-OWN), with different users (hint: no user has \`"read:any"\`)`),
            (user, omitFields) => {
              //@todo: rename to expectedOmittedFields
              const ownDocumentId = user.id * 10;
              const document = findDocument(ownDocumentId);
              const expectedOwnDocument = _.omit(document, omitFields);

              it(
                joinAll(
                  docs(`
#### A user with ${user.roles.join(' + ')}

It returns **${
                    _.isEmpty(omitFields) ? 'all' : 'only allowed'
                  } attributes** on OWN document ${
                    _.isEmpty(omitFields)
                      ? ''
                      : '(i.e all except `' + omitFields.join('`, `') + '`)'
                  }`),
                  code(`
user = ${pOTS(user)};
// => GET http://${endpoint}/${ownDocumentId}
${pOTS(expectedOwnDocument)}
`),
                ),
                async () => {
                  injectedUser = user;

                  return request(app.getHttpServer())
                    .get(`${endpoint}/${ownDocumentId}`)
                    .expect(200)
                    .expect(expectedOwnDocument);
                },
              );

              const nonOwnDocumentId = user.id * 1000;
              const nonOwnExpectedStatusCode = HttpStatus.FORBIDDEN;
              it(
                joinAll(
                  docs(`
But on a NON-OWN document it forbids
`),
                  code(`
// => GET http://${endpoint}/${nonOwnDocumentId}
"${nonOwnExpectedStatusCode} - ${HttpStatus[nonOwnExpectedStatusCode]}"
`),
                ),
                async () => {
                  injectedUser = user;

                  return request(app.getHttpServer())
                    .get(`${endpoint}/${nonOwnDocumentId}`)
                    .expect(nonOwnExpectedStatusCode);
                },
              );
            },
          );

          describe(`
### Action "list"`, () => {
            const expectedOwnDocuments = ALL_DOCUMENTS.map(doc =>
              isUserCreatorOfDocument({
                user: { id: 1, roles: ['EMPLOYEE'] },
                resourceId: doc.id,
              })
                ? _.omit(doc, ['confidential'])
                : _.pick(doc, ['title', 'date']),
            );

            it(
              joinAll(
                docs(
                  `
Action "list" will give us ALL the documents a user is **allowed** to browse, with only the allowed attributes, **depending on ownership of each item**.`,
                ),
                code(`
user = { id: 1, roles: ['EMPLOYEE'] };
// => GET http://${endpoint}
// showing only the first 5 docs for brevity
${pOTS(_.take(expectedOwnDocuments, 5))}`),
              ),
              async () => {
                injectedUser = { id: 1, roles: ['EMPLOYEE'] };

                return request(app.getHttpServer())
                  .get(endpoint)
                  .expect(200)
                  .expect(expectedOwnDocuments);
              },
            );

            const notGrantedExpectedStatusCode = HttpStatus.FORBIDDEN;
            it(
              joinAll(
                docs(`
Forbids if user doesnt have "list" action granted.`),
                code(`
user = { id: 4, roles: ['COMPANY_ADMIN'] };
// => GET http://${endpoint}
"${notGrantedExpectedStatusCode} - ${HttpStatus[notGrantedExpectedStatusCode]}"
`),
              ),
              async () => {
                injectedUser = { id: 4, roles: ['COMPANY_ADMIN'] };

                return request(app.getHttpServer())
                  .get(`${endpoint}`)
                  .expect(403);
              },
            );
          });

          describe(
            joinAll(
              docs(`
# Setting up the module

A no-comments module setting up follows.
`),
              fileToText(
                __dirname,
                `../simple/example-simple.module.ts`,
                '// omitted imports',
                {
                  printWidth: 78,
                  parser: 'typescript',
                },
              ),
              docs(`
# Next steps

That's it, you've been initiated!

Now continue to the [detailed example which also serves as a reference](/additional-documentation/reference-&-detailed-example.html).
`),
            ),
            () => {},
          );
        },
      );
    });
  },
);
